{"ast":null,"code":"var _jsxFileName = \"/Users/suprateembanerjee/GraphQL/client/src/DisplayData.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useQuery, gql, useLazyQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUERY_ALL_USERS = gql`\n    query GetAllUsers {\n        users {\n            name\n            id\n            username\n            age\n        }\n    }\n`;\nconst QUERY_ALL_MOVIES = gql`\n    query GetAllUsers {\n        movies {\n            name\n            release\n        }\n    }\n`;\nconst QUERY_MOVIE = gql`\n    query Movie($name: String!) {\n       movie(name: $name) {\n        name\n        release\n        isInTheaters\n        }\n    }\n`;\nfunction DisplayData() {\n  _s();\n  const {\n    data: userData,\n    loading: userDataLoading,\n    error: userDataError\n  } = useQuery(QUERY_ALL_USERS);\n  const {\n    data: movieData\n  } = useQuery(QUERY_ALL_MOVIES);\n  const [movieSearched, setMovieSearched] = useState(\"\");\n  const [fetchMovie, {\n    data: movieSearchedData,\n    error: MovieError\n  }] = useLazyQuery(QUERY_MOVIE);\n  if (userDataLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data is Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n  if (userData) {\n    console.log(userData);\n  }\n  if (userDataError) {\n    console.log(userDataError);\n  }\n  if (MovieError) {\n    console.log(MovieError);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [userData && userData.users.map(user => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: user.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Age: \", user.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"@\", user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 24\n      }, this);\n    }), movieData && movieData.movies.map(movie => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: movie.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"was released in \", movie.release]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 24\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Name of Movie\",\n        onChange: event => {\n          setMovieSearched(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchMovie({\n            variables: {\n              name: movieSearched\n            }\n          });\n        },\n        children: \"Fetch Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [movieSearchedData && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" Movie Name: \", movieSearchedData.movie.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 26\n          }, this), \" \", \" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\" Movie release: \", movieSearchedData.movie.release]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 26\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), MovieError && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Movie not found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 12\n  }, this);\n}\n_s(DisplayData, \"a93dRJVIolll7nP/1ebms0ZrmWQ=\", false, function () {\n  return [useQuery, useQuery, useLazyQuery];\n});\n_c = DisplayData;\nexport default DisplayData;\nvar _c;\n$RefreshReg$(_c, \"DisplayData\");","map":{"version":3,"names":["React","useState","useQuery","gql","useLazyQuery","jsxDEV","_jsxDEV","QUERY_ALL_USERS","QUERY_ALL_MOVIES","QUERY_MOVIE","DisplayData","_s","data","userData","loading","userDataLoading","error","userDataError","movieData","movieSearched","setMovieSearched","fetchMovie","movieSearchedData","MovieError","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","users","map","user","name","age","username","movies","movie","release","type","placeholder","onChange","event","target","value","onClick","variables","_c","$RefreshReg$"],"sources":["/Users/suprateembanerjee/GraphQL/client/src/DisplayData.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, gql, useLazyQuery } from \"@apollo/client\";\n\nconst QUERY_ALL_USERS = gql `\n    query GetAllUsers {\n        users {\n            name\n            id\n            username\n            age\n        }\n    }\n`\n\nconst QUERY_ALL_MOVIES = gql `\n    query GetAllUsers {\n        movies {\n            name\n            release\n        }\n    }\n`\n\nconst QUERY_MOVIE = gql `\n    query Movie($name: String!) {\n       movie(name: $name) {\n        name\n        release\n        isInTheaters\n        }\n    }\n`;\n\n\nfunction DisplayData() {\n\n    const {data: userData, loading: userDataLoading, error: userDataError} = useQuery(QUERY_ALL_USERS);\n    const {data: movieData} = useQuery(QUERY_ALL_MOVIES);\n    const [movieSearched, setMovieSearched] = useState(\"\");\n    const [\n        fetchMovie, \n        {data: movieSearchedData, error: MovieError}\n    ] = useLazyQuery(QUERY_MOVIE);\n\n    if (userDataLoading) {\n        return <h1>Data is Loading...</h1>\n    }\n\n    if (userData) {\n        console.log(userData)\n    }\n\n    if (userDataError) {\n        console.log(userDataError)\n    }\n\n    if (MovieError) {\n        console.log(MovieError)\n    }\n\n    return <div>\n        {userData && \n            userData.users.map((user) => {\n                return <div>\n                    <h1>{user.name}</h1>\n                    <h2>Age: {user.age}</h2>\n                    <h2>@{user.username}</h2>\n                    </div>\n            })\n        }\n\n        {movieData &&\n            movieData.movies.map((movie) => {\n                return <div>\n                    <h1>{movie.name}</h1> <h2>was released in {movie.release}</h2>\n                    </div>\n            })\n        }\n\n        <div>\n            <input type='text' placeholder=\"Name of Movie\" onChange={(event) => {\n                setMovieSearched(event.target.value)\n                }}/>\n            <button onClick={() => {\n                fetchMovie({variables: {\n                    name: movieSearched,\n                }})\n            }}>Fetch Data</button>\n            <div>{movieSearchedData && (\n                <div> \n                    {\" \"}<h3> Movie Name: {movieSearchedData.movie.name}</h3>{\" \"}\n                    {\" \"}<h3> Movie release: {movieSearchedData.movie.release}</h3>{\" \"}\n                </div>\n                )}\n                {MovieError && <h3>Movie not found.</h3>}\n            </div>\n            \n        </div>\n\n        </div>\n}\n\nexport default DisplayData"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}