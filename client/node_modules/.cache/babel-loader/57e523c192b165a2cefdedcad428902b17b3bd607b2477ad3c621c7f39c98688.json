{"ast":null,"code":"var _jsxFileName = \"/Users/suprateembanerjee/GraphQL/client/src/DisplayData.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useQuery, gql, useLazyQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUERY_ALL_USERS = gql`\n    query GetAllUsers {\n        users {\n            name\n            id\n            nationality\n            username\n            age\n            friends {\n                name\n            }\n        }\n    }\n`;\nconst QUERY_ALL_MOVIES = gql`\n    query GetAllUsers {\n        movies {\n            name\n            release\n            isInTheaters\n        }\n    }\n`;\nconst QUERY_MOVIE = gql`\nquery getMovie($name: String!) {\n       movie(name: $name) {\n        name\n        release\n        isInTheaters\n        }\n    }\n`;\nfunction DisplayData() {\n  _s();\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(QUERY_ALL_MOVIES);\n  const [movieSearched, setMovieSearched] = useState(\"\");\n  const [fetchMovie, {\n    data: movieSearchedData,\n    error: MovieError\n  }] = useLazyQuery();\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Data is Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }, this);\n  }\n  if (data) {\n    console.log(data);\n  }\n  if (error) {\n    console.log(error);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data && data.users.map(user => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Name: \", user.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Age: \", user.age]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Username: \", user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 12\n  }, this);\n}\n_s(DisplayData, \"lwVKGMEhLYc3Y1SC3+aqN96NZCQ=\", false, function () {\n  return [useQuery, useLazyQuery];\n});\n_c = DisplayData;\nexport default DisplayData;\nvar _c;\n$RefreshReg$(_c, \"DisplayData\");","map":{"version":3,"names":["React","useState","useQuery","gql","useLazyQuery","jsxDEV","_jsxDEV","QUERY_ALL_USERS","QUERY_ALL_MOVIES","QUERY_MOVIE","DisplayData","_s","data","loading","error","movieSearched","setMovieSearched","fetchMovie","movieSearchedData","MovieError","children","fileName","_jsxFileName","lineNumber","columnNumber","console","log","users","map","user","name","age","username","_c","$RefreshReg$"],"sources":["/Users/suprateembanerjee/GraphQL/client/src/DisplayData.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery, gql, useLazyQuery } from \"@apollo/client\";\n\nconst QUERY_ALL_USERS = gql `\n    query GetAllUsers {\n        users {\n            name\n            id\n            nationality\n            username\n            age\n            friends {\n                name\n            }\n        }\n    }\n`\n\nconst QUERY_ALL_MOVIES = gql `\n    query GetAllUsers {\n        movies {\n            name\n            release\n            isInTheaters\n        }\n    }\n`\n\nconst QUERY_MOVIE = gql `\nquery getMovie($name: String!) {\n       movie(name: $name) {\n        name\n        release\n        isInTheaters\n        }\n    }\n`\n\n\nfunction DisplayData() {\n\n    const {data, loading, error} = useQuery(QUERY_ALL_MOVIES);\n    const [movieSearched, setMovieSearched] = useState(\"\")\n    const [fetchMovie, {data: movieSearchedData, error: MovieError}] = useLazyQuery()\n\n    if (loading) {\n        return <h1>Data is Loading...</h1>\n    }\n\n    if (data) {\n        console.log(data)\n    }\n\n    if (error) {\n        console.log(error)\n    }\n\n    return <div>\n        {data && \n            data.users.map((user) => {\n                return <div>\n                    <h1>Name: {user.name}</h1>\n                    <h1>Age: {user.age}</h1>\n                    <h1>Username: {user.username}</h1>\n\n                    </div>\n            })\n        }  \n        {/* {data && \n            data.movies.map((movie) => {\n                return <div>\n                    <h1>Name: {movie.name}</h1>\n                    <h1>Release: {movie.release}</h1>\n                    <h1>In Theaters: {String(movie.isInTheaters)}</h1>\n                    </div>\n            })\n        } */}\n\n        {/* <div>\n            <input type='text' placeholder=\"Interstellar...\" onChange={(event) => setMovieSearched(event.target.value)}/>\n            <button onClick={{fetchMovie}}>Fetch Data</button>\n            <div>{movieSearchedData && \n                <div> \n                    {\" \"}<h1> Movie Name: {movieSearchedData.movie.name}</h1>{\" \"}\n                </div>}\n            </div>\n            <div>{movieSearchedData && \n                <div> \n                    {\" \"}<h1> Movie release: {movieSearchedData.movie.release}</h1>{\" \"}\n                </div>}\n            </div>\n            <div>{movieSearchedData && \n                <div> \n                    {\" \"}<h1> Movie in theaters?: {movieSearchedData.movie.isInTheaters}</h1>{\" \"}\n                </div>}\n            </div>\n        </div> */}\n        </div>\n}\n\nexport default DisplayData"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,QAAQ,EAAEC,GAAG,EAAEC,YAAY,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,eAAe,GAAGJ,GAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMK,gBAAgB,GAAGL,GAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMM,WAAW,GAAGN,GAAK;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAGD,SAASO,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAEnB,MAAM;IAACC,IAAI;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGZ,QAAQ,CAACM,gBAAgB,CAAC;EACzD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgB,UAAU,EAAE;IAACL,IAAI,EAAEM,iBAAiB;IAAEJ,KAAK,EAAEK;EAAU,CAAC,CAAC,GAAGf,YAAY,CAAC,CAAC;EAEjF,IAAIS,OAAO,EAAE;IACT,oBAAOP,OAAA;MAAAc,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACtC;EAEA,IAAIZ,IAAI,EAAE;IACNa,OAAO,CAACC,GAAG,CAACd,IAAI,CAAC;EACrB;EAEA,IAAIE,KAAK,EAAE;IACPW,OAAO,CAACC,GAAG,CAACZ,KAAK,CAAC;EACtB;EAEA,oBAAOR,OAAA;IAAAc,QAAA,EACFR,IAAI,IACDA,IAAI,CAACe,KAAK,CAACC,GAAG,CAAEC,IAAI,IAAK;MACrB,oBAAOvB,OAAA;QAAAc,QAAA,gBACHd,OAAA;UAAAc,QAAA,GAAI,QAAM,EAACS,IAAI,CAACC,IAAI;QAAA;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1BlB,OAAA;UAAAc,QAAA,GAAI,OAAK,EAACS,IAAI,CAACE,GAAG;QAAA;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxBlB,OAAA;UAAAc,QAAA,GAAI,YAAU,EAACS,IAAI,CAACG,QAAQ;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE7B,CAAC;IACd,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OA+BD,CAAC;AACd;AAACb,EAAA,CA3DQD,WAAW;EAAA,QAEeR,QAAQ,EAE4BE,YAAY;AAAA;AAAA6B,EAAA,GAJ1EvB,WAAW;AA6DpB,eAAeA,WAAW;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}