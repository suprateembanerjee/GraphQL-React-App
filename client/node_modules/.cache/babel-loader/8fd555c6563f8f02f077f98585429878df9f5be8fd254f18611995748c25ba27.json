{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { visit } from \"graphql\";\nimport { wrap } from \"optimism\";\nimport { getFragmentDefinitions } from \"../../utilities/index.js\";\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry() {\n  var fragments = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fragments[_i] = arguments[_i];\n  }\n  return new (FragmentRegistry.bind.apply(FragmentRegistry, __spreadArray([void 0], fragments, false)))();\n}\nvar FragmentRegistry = /** @class */function () {\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  function FragmentRegistry() {\n    var fragments = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fragments[_i] = arguments[_i];\n    }\n    this.registry = Object.create(null);\n    this.resetCaches();\n    if (fragments.length) {\n      this.register.apply(this, fragments);\n    }\n  }\n  FragmentRegistry.prototype.register = function () {\n    var _this = this;\n    var fragments = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      fragments[_i] = arguments[_i];\n    }\n    var definitions = new Map();\n    fragments.forEach(function (doc) {\n      getFragmentDefinitions(doc).forEach(function (node) {\n        definitions.set(node.name.value, node);\n      });\n    });\n    definitions.forEach(function (node, name) {\n      if (node !== _this.registry[name]) {\n        _this.registry[name] = node;\n        _this.invalidate(name);\n      }\n    });\n    return this;\n  };\n  // Overridden in the resetCaches method below.\n  FragmentRegistry.prototype.invalidate = function (name) {};\n  FragmentRegistry.prototype.resetCaches = function () {\n    this.invalidate = (this.lookup = this.cacheUnaryMethod(this.lookup)).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = this.cacheUnaryMethod(this.transform);\n    this.findFragmentSpreads = this.cacheUnaryMethod(this.findFragmentSpreads);\n  };\n  FragmentRegistry.prototype.cacheUnaryMethod = function (originalMethod) {\n    return wrap(originalMethod.bind(this), {\n      makeCacheKey: function (arg) {\n        return arg;\n      }\n    });\n  };\n  FragmentRegistry.prototype.lookup = function (fragmentName) {\n    return this.registry[fragmentName] || null;\n  };\n  FragmentRegistry.prototype.transform = function (document) {\n    var _this = this;\n    var defined = new Map();\n    getFragmentDefinitions(document).forEach(function (def) {\n      defined.set(def.name.value, def);\n    });\n    var unbound = new Set();\n    var enqueue = function (spreadName) {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n    var enqueueChildSpreads = function (node) {\n      return Object.keys(_this.findFragmentSpreads(node)).forEach(enqueue);\n    };\n    enqueueChildSpreads(document);\n    var missing = [];\n    var map = Object.create(null);\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach(function (fragmentName) {\n      var knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads(map[fragmentName] = knownFragmentDef);\n      } else {\n        missing.push(fragmentName);\n        var def = _this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads(map[fragmentName] = def);\n        }\n      }\n    });\n    if (missing.length) {\n      var defsToAppend_1 = [];\n      missing.forEach(function (name) {\n        var def = map[name];\n        if (def) {\n          defsToAppend_1.push(def);\n        }\n      });\n      if (defsToAppend_1.length) {\n        document = __assign(__assign({}, document), {\n          definitions: document.definitions.concat(defsToAppend_1)\n        });\n      }\n    }\n    return document;\n  };\n  FragmentRegistry.prototype.findFragmentSpreads = function (root) {\n    var spreads = Object.create(null);\n    visit(root, {\n      FragmentSpread: function (node) {\n        spreads[node.name.value] = node;\n      }\n    });\n    return spreads;\n  };\n  return FragmentRegistry;\n}();","map":{"version":3,"names":["visit","wrap","getFragmentDefinitions","createFragmentRegistry","fragments","_i","arguments","length","FragmentRegistry","bind","apply","__spreadArray","registry","Object","create","resetCaches","register","prototype","_this","definitions","Map","forEach","doc","node","set","name","value","invalidate","lookup","cacheUnaryMethod","dirty","transform","findFragmentSpreads","originalMethod","makeCacheKey","arg","fragmentName","document","defined","def","unbound","Set","enqueue","spreadName","has","add","enqueueChildSpreads","keys","missing","map","knownFragmentDef","get","push","defsToAppend_1","__assign","concat","root","spreads","FragmentSpread"],"sources":["/Users/suprateembanerjee/GraphQL/client/node_modules/@apollo/src/cache/inmemory/fragmentRegistry.ts"],"sourcesContent":["import type {\n  DocumentNode,\n  ASTNode,\n  FragmentDefinitionNode,\n  FragmentSpreadNode,\n} from \"graphql\";\nimport { visit } from \"graphql\";\n\nimport type { OptimisticWrapperFunction } from \"optimism\";\nimport { wrap } from \"optimism\";\n\nimport type { FragmentMap } from \"../../utilities/index.js\";\nimport { getFragmentDefinitions } from \"../../utilities/index.js\";\n\nexport interface FragmentRegistryAPI {\n  register(...fragments: DocumentNode[]): this;\n  lookup(fragmentName: string): FragmentDefinitionNode | null;\n  transform<D extends DocumentNode>(document: D): D;\n}\n\n// As long as createFragmentRegistry is not imported or used, the\n// FragmentRegistry example implementation provided below should not be bundled\n// (by tree-shaking bundlers like Rollup), because the implementation of\n// InMemoryCache refers only to the TypeScript interface FragmentRegistryAPI,\n// never the concrete implementation FragmentRegistry (which is deliberately not\n// exported from this module).\nexport function createFragmentRegistry(\n  ...fragments: DocumentNode[]\n): FragmentRegistryAPI {\n  return new FragmentRegistry(...fragments);\n}\n\nclass FragmentRegistry implements FragmentRegistryAPI {\n  private registry: FragmentMap = Object.create(null);\n\n  // Call `createFragmentRegistry` instead of invoking the\n  // FragmentRegistry constructor directly. This reserves the constructor for\n  // future configuration of the FragmentRegistry.\n  constructor(...fragments: DocumentNode[]) {\n    this.resetCaches();\n    if (fragments.length) {\n      this.register(...fragments);\n    }\n  }\n\n  public register(...fragments: DocumentNode[]): this {\n    const definitions = new Map<string, FragmentDefinitionNode>();\n    fragments.forEach((doc: DocumentNode) => {\n      getFragmentDefinitions(doc).forEach((node) => {\n        definitions.set(node.name.value, node);\n      });\n    });\n\n    definitions.forEach((node, name) => {\n      if (node !== this.registry[name]) {\n        this.registry[name] = node;\n        this.invalidate(name);\n      }\n    });\n\n    return this;\n  }\n\n  // Overridden in the resetCaches method below.\n  private invalidate(name: string) {}\n\n  public resetCaches() {\n    this.invalidate = (this.lookup = this.cacheUnaryMethod(this.lookup)).dirty; // This dirty function is bound to the wrapped lookup method.\n    this.transform = this.cacheUnaryMethod(this.transform);\n    this.findFragmentSpreads = this.cacheUnaryMethod(this.findFragmentSpreads);\n  }\n\n  private cacheUnaryMethod<F extends (arg: any) => any>(originalMethod: F) {\n    return wrap<Parameters<F>, ReturnType<F>>(originalMethod.bind(this), {\n      makeCacheKey: (arg) => arg,\n    }) as OptimisticWrapperFunction<Parameters<F>, ReturnType<F>> & F;\n  }\n\n  public lookup(fragmentName: string): FragmentDefinitionNode | null {\n    return this.registry[fragmentName] || null;\n  }\n\n  public transform<D extends DocumentNode>(document: D): D {\n    const defined = new Map<string, FragmentDefinitionNode>();\n    getFragmentDefinitions(document).forEach((def) => {\n      defined.set(def.name.value, def);\n    });\n\n    const unbound = new Set<string>();\n    const enqueue = (spreadName: string) => {\n      if (!defined.has(spreadName)) {\n        unbound.add(spreadName);\n      }\n    };\n\n    const enqueueChildSpreads = (node: ASTNode) =>\n      Object.keys(this.findFragmentSpreads(node)).forEach(enqueue);\n\n    enqueueChildSpreads(document);\n\n    const missing: string[] = [];\n    const map: FragmentMap = Object.create(null);\n\n    // This Set forEach loop can be extended during iteration by adding\n    // additional strings to the unbound set.\n    unbound.forEach((fragmentName) => {\n      const knownFragmentDef = defined.get(fragmentName);\n      if (knownFragmentDef) {\n        enqueueChildSpreads((map[fragmentName] = knownFragmentDef));\n      } else {\n        missing.push(fragmentName);\n        const def = this.lookup(fragmentName);\n        if (def) {\n          enqueueChildSpreads((map[fragmentName] = def));\n        }\n      }\n    });\n\n    if (missing.length) {\n      const defsToAppend: FragmentDefinitionNode[] = [];\n      missing.forEach((name) => {\n        const def = map[name];\n        if (def) {\n          defsToAppend.push(def);\n        }\n      });\n\n      if (defsToAppend.length) {\n        document = {\n          ...document,\n          definitions: document.definitions.concat(defsToAppend),\n        };\n      }\n    }\n\n    return document;\n  }\n\n  public findFragmentSpreads(root: ASTNode): FragmentSpreadMap {\n    const spreads: FragmentSpreadMap = Object.create(null);\n\n    visit(root, {\n      FragmentSpread(node) {\n        spreads[node.name.value] = node;\n      },\n    });\n\n    return spreads;\n  }\n}\n\ninterface FragmentSpreadMap {\n  [fragmentSpreadName: string]: FragmentSpreadNode;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}